[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codesentinel"
version = "1.0.0"
authors = [
    {name = "CodeSentinel Team", email = "team@codesentinel.dev"}
]
description = "AI-Powered Multi-Language Code Security Auditor"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
keywords = ["security", "static-analysis", "code-audit", "ai", "vulnerability-scanner"]

dependencies = [
    "openai>=1.0.0",
    "python-dotenv>=1.0.0",
    "colorama>=0.4.6",
    "aiofiles>=23.0.0",
    "httpx>=0.25.0",
    "PyYAML>=6.0.0",
    "tqdm>=4.65.0",
    "psutil>=5.9.0",
    "chardet>=5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "pip-audit>=2.5.0",
]
build = [
    "build>=0.10.0",
    "twine>=4.0.0",
    "wheel>=0.40.0",
]

[project.scripts]
codesentinel = "main:main"

[project.urls]
Homepage = "https://github.com/superFRANK666/CodeSentinel"
Documentation = "https://github.com/superFRANK666/CodeSentinel/wiki"
Repository = "https://github.com/superFRANK666/CodeSentinel.git"
"Bug Tracker" = "https://github.com/superFRANK666/CodeSentinel/issues"
Changelog = "https://github.com/superFRANK666/CodeSentinel/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | htmlcov
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]